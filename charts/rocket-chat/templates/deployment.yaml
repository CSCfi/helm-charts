kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Values.mongodb.appName }}
  labels:
    app: {{ .Values.mongodb.appName }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.mongodb.appName }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: {{ .Values.mongodb.appName }}
    spec:
      containers:
        - name: mongodb
          image: {{ .Values.mongodb.image }}
          ports:
            - containerPort: {{ .Values.mongodb.service.ports.mongodb }}
              protocol: TCP
          env:
            - name: MONGODB_USER
              value: {{ .Values.mongodb.dbUser }}
            - name: MONGODB_PASSWORD
              value: {{ .Values.mongodb.password }}
            - name: MONGODB_DATABASE
              value: {{ .Values.mongodb.dbName }}
            - name: MONGODB_ADMIN_PASSWORD
              value: {{ .Values.mongodb.adminPassword }}
          resources:
            limits:
              memory: 512Mi
          volumeMounts:
            - name: {{ .Values.mongodb.appName }}-data
              mountPath: /var/lib/mongodb/data
          livenessProbe:
            tcpSocket:
              port: 27017
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -i
                - -c
                - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD --eval="quit()"
            initialDelaySeconds: 3
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
      volumes:
        - name: {{ .Values.mongodb.appName }}-data
          persistentVolumeClaim:
            claimName: {{ .Values.mongodb.appName }}-pvc
      restartPolicy: Always

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Values.rocketchat.appName }}
  labels:
    app: {{ .Values.rocketchat.appName }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.rocketchat.appName }}
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ .Values.rocketchat.appName }}
    spec:
      volumes:
        - name: rocketchat-volume-1
          emptyDir: {}
      containers:
        - name: rocketchat
          image: {{ .Values.rocketchat.image }}
          ports:
            - containerPort: 3000
              protocol: TCP
          env:
            - name: MONGO_URL
              valueFrom:
                secretKeyRef:
                  name: {{ template "rocketchat.mongodb.fullname" . }}
                  key: mongo-uri
          volumeMounts:
            - name: rocketchat-volume-1
              mountPath: /app/uploads
          imagePullPolicy: Always
      restartPolicy: Always