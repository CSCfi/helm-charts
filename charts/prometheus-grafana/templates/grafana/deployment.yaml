apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.grafana.appName }}
  labels:
    app: {{ .Values.grafana.appName }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.grafana.appName }}
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ .Values.grafana.appName }}
    spec:
      containers:
      - name: {{ .Values.grafana.appName }}
        image: {{ .Values.grafana.image }}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
        env:
        - name: ADMIN_USER
          valueFrom:
            secretKeyRef:
              key: admin-username
              name: {{ .Values.grafana.appName }}
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: admin-password
              name: {{ .Values.grafana.appName }}
        args:
        - '--homepath=/usr/share/grafana'
        - '--config=/etc/grafana/grafana.ini'
        resources:
          limits:
            memory: {{ .Values.grafana.limits.memory }}
          requests:
            memory: {{ .Values.grafana.requests.memory }}
        volumeMounts:
        - mountPath: /etc/grafana
          name: {{ .Values.grafana.appName }}-config
        - mountPath: /var/lib/grafana
          name: {{ .Values.grafana.appName }}-data
      restartPolicy: Always
      volumes:
      - name: {{ .Values.grafana.appName }}-config
        configMap:
          defaultMode: 420
          name: {{ .Values.grafana.appName }}-config
          items:
          - key: grafana.ini
            path: grafana.ini
          - key: datasource.yaml
            path: provisioning/datasources/datasource.yaml
      - name: {{ .Values.grafana.appName }}-data
        persistentVolumeClaim:
          claimName: {{ .Values.grafana.appName }}-data