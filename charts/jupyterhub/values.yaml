## @param route Configuration for the Route resource in OpenShift
##
route:
  enabled: true
  host: "" # Edit this value
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect

##############
# JupyterHub #
##############
jupyterhub:
  global:
    security:
      allowInsecureImages: true

  proxy:
    image:
      repository: bitnamilegacy/configurable-http-proxy
      tag: 5.0.1-debian-12-r21
    resources:
      requests:
        cpu: 60m
        memory: 64Mi
      limits:
        cpu: 125m
        memory: 128Mi
    service:
      public:
        type: ClusterIP

  imagePuller:
    resources:
      requests:
        cpu: 60m
        memory: 64Mi
      limits:
        cpu: 125m
        memory: 128Mi
   
  singleuser:
    image:
      repository: bitnamilegacy/jupyter-base-notebook
      tag: 5.3.0-debian-12-r10
    persistence:
      enabled: true
      size: 10Gi
    resources:
      requests:
        cpu: 250m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 512Mi
 
  hub:
    image:
      repository: bitnamilegacy/jupyterhub
      tag: 5.3.0-debian-12-r15
    baseUrl: /
    authenticatorClass: native
    adminUser: user
    password: ""
    services: {}
    configuration: |
      Chart:
        Name: {{ .Chart.Name }}
        Version: {{ .Chart.Version }}
      Release:
        Name: {{ .Release.Name }}
        Namespace: {{ .Release.Namespace }}
        Service: {{ .Release.Service }}
      hub:
        config:
          JupyterHub:
            admin_access: true
            authenticator_class: {{ .Values.hub.authenticatorClass }}
            Authenticator:
              admin_users:
                - {{ .Values.hub.adminUser }}
              allow_all: true
            DummyAuthenticator:
            {{- if .Values.hub.password }}
              password: {{ .Values.hub.password | quote }}
            {{- else }}
              password: {{ randAlphaNum 10 | quote }}
            {{- end }}
        cookieSecret:
        concurrentSpawnLimit: 64
        consecutiveFailureLimit: 5
        activeServerLimit:
        db:
          type: postgres
          url: postgresql://{{ ternary .Values.postgresql.auth.username .Values.externalDatabase.user .Values.postgresql.enabled }}@{{ ternary (include "jupyterhub.postgresql.fullname" .) .Values.externalDatabase.host .Values.postgresql.enabled }}:{{ ternary "5432" .Values.externalDatabase.port .Values.postgresql.enabled }}/{{ ternary .Values.postgresql.auth.database .Values.externalDatabase.database .Values.postgresql.enabled }}
        services: {{- include "common.tplvalues.render" ( dict "value" .Values.hub.services "context" $ ) | nindent 8 }}
        allowNamedServers: false
        namedServerLimitPerUser:
        {{- if .Values.hub.metrics.serviceMonitor.enabled }}
        authenticatePrometheus: {{ .Values.hub.metrics.authenticatePrometheus }}
        {{- end }}
        redirectToServer:
        shutdownOnLogout:
      singleuser:
        podNameTemplate: {{ include "common.names.fullname" . }}-jupyter-{username}
        {{- if .Values.singleuser.tolerations }}
        extraTolerations: {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.tolerations "context" $) | nindent 4 }}
        {{- end }}
        {{- if .Values.singleuser.nodeSelector }}
        nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.nodeSelector "context" $) | nindent 4 }}
        {{- end }}
        networkTools:
          image:
            name: {{ include "jupyterhub.hubconfiguration.imageEntry" ( dict "imageRoot" .Values.auxiliaryImage "global" .Values.global) }}
            tag: {{ .Values.auxiliaryImage.tag }}
            digest: {{ .Values.auxiliaryImage.digest }}
            pullPolicy: {{ .Values.auxiliaryImage.pullPolicy }}
            pullSecrets: {{- include "jupyterhub.imagePullSecrets.list" . | nindent 8 }}
        cloudMetadata:
          blockWithIptables: false
        events: true
        extraAnnotations:
          {{- if .Values.commonAnnotations }}
          {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
          {{- end }}
          {{- if .Values.singleuser.podAnnotations }}
          {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.podAnnotations "context" $ ) | nindent 4 }}
          {{- end }}
        extraLabels:
          hub.jupyter.org/network-access-hub: "true"
          app.kubernetes.io/component: singleuser
          {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
          {{- if .Values.singleuser.podLabels }}
          {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.podLabels "context" $ ) | nindent 4 }}
          {{- end }}
        {{- if .Values.singleuser.extraEnvVars }}
        extraEnv: {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.extraEnvVars "context" $ ) | nindent 4 }}
        {{- end }}
        {{- if .Values.singleuser.lifecycleHooks }}
        lifecycleHooks: {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.lifecycleHooks "context" $ ) | nindent 4 }}
        {{- end }}
        {{- if .Values.singleuser.initContainers }}
        initContainers: {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.initContainers "context" $ ) | nindent 4 }}
        {{- end }}
        {{- if .Values.singleuser.sidecars }}
        extraContainers: {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.sidecars "context" $ ) | nindent 4 }}
        {{- end }}
        {{- if not (or (eq .Values.global.compatibility.openshift.adaptSecurityContext "force") (and (eq .Values.global.compatibility.openshift.adaptSecurityContext "auto") (include "common.compatibility.isOpenshift" .))) }}
        {{- if .Values.singleuser.containerSecurityContext.enabled }}
        uid: {{ .Values.singleuser.containerSecurityContext.runAsUser }}
        {{- end }}
        {{- if .Values.singleuser.podSecurityContext.enabled }}
        fsGid: {{ .Values.singleuser.podSecurityContext.fsGroup }}
        {{- end }}
        {{- end }}
        {{- if .Values.singleuser.containerSecurityContext.enabled }}
        containerSecurityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.singleuser.containerSecurityContext "context" $) | nindent 4 }}
        {{- end }}
        {{- if .Values.singleuser.podSecurityContext.enabled }}
        podSecurityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.singleuser.podSecurityContext "context" $) | nindent 4 }}
        {{- end }}
        serviceAccountName: {{ template "jupyterhub.singleuserServiceAccountName" . }}
        automountServiceAccountToken: {{ .Values.singleuser.automountServiceAccountToken }}
        storage:
          {{- if .Values.singleuser.persistence.enabled }}
          type: dynamic
          {{- else }}
          type: none
          {{- end }}
          extraLabels:
            app.kubernetes.io/component: singleuser
            {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 6 }}
          extraVolumes:
            - name: empty-dir
              emptyDir: {}
            {{- if .Values.singleuser.extraVolumes }}
            {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.extraVolumes "context" $ ) | nindent 6 }}
            {{- end }}
          extraVolumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            {{- if .Values.singleuser.extraVolumeMounts }}
            {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.extraVolumeMounts "context" $ ) | nindent 6 }}
            {{- end }}
          capacity: {{ .Values.singleuser.persistence.size }}
          homeMountPath: {{ .Values.singleuser.notebookDir }}
          dynamic:
            {{ include "jupyterhub.storage.class" (dict "persistence" .Values.singleuser.persistence "global" .Values.global) }}
            pvcNameTemplate: {{ include "common.names.fullname" . }}-claim-{username}{servername}
            volumeNameTemplate: {{ include "common.names.fullname" . }}-volume-{username}{servername}
            storageAccessModes: {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.persistence.accessModes "context" $ ) | nindent 8 }}
        image:
          name: {{ include "jupyterhub.hubconfiguration.imageEntry" ( dict "imageRoot" .Values.singleuser.image "global" .Values.global) }}
          tag: {{ .Values.singleuser.image.tag }}
          digest: {{ .Values.singleuser.image.digest }}
          pullPolicy: {{ .Values.singleuser.image.pullPolicy }}
          pullSecrets: {{- include "jupyterhub.imagePullSecrets.list" . | nindent 4 }}
        startTimeout: 300
        {{- include "jupyterhub.singleuser.resources" . | nindent 2 }}
        {{- if .Values.singleuser.command }}
        cmd: {{- include "common.tplvalues.render" (dict "value" .Values.singleuser.command "context" $) | nindent 4 }}
        {{- else }}
        cmd: jupyterhub-singleuser
        {{- end }}
        defaultUrl:
        {{- if .Values.singleuser.profileList }}
        profileList: {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.profileList "context" $) | nindent 4 }}
        {{- end }}
      cull:
        enabled: true
        users: false
        removeNamedServers: false
        timeout: 3600
        every: 600
        concurrency: 10
        maxAge: 0

    resources:
      requests:
        cpu: 125m
        memory: 128Mi
      limits:
        cpu: 250m
        memory: 256Mi

  postgresql:
    enabled: false 
    global:
      security:
        allowInsecureImages: true
    image:
      registry: ""
      repository: ""
      tag: ""
    auth:
      username: bn_jupyterhub
      password: ""
      database: bitnami_jupyterhub
      existingSecret: ""
  architecture: standalone
  service:
    ports:
      postgresql: 5432

  externalDatabase:
    host: ""
    port: 5432
    user: ""
    database: ""
    password: ""
    existingSecret: ""
    existingSecretPasswordKey: ""
