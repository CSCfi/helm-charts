## @param route Configuration for the Route resource in OpenShift
##
route:
  enabled: true
  host: "" # Edit this value
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect

##############
# JupyterHub #
##############
jupyterhub:
  global:
    ## Security parameters
    ##
    security:
      ## @param global.security.allowInsecureImages Allows skipping image verification
      allowInsecureImages: true
  ## @section Proxy deployment parameters
  proxy:
    ## @param proxy.image.registry [default: REGISTRY_NAME] Proxy image registry
    ## @param proxy.image.repository [default: REPOSITORY_NAME/configurable-http-proxy] Proxy image repository
    ## @skip proxy.image.tag Proxy image tag (immutable tags are recommended)
    ## @param proxy.image.debug Activate verbose output
    image:
      registry: docker.io
      repository: bitnami/configurable-http-proxy
      tag: 4.6.3-debian-12-r5
      debug: false
    ## Configure the ingress resource that allows you to access to your JupyterHub instance
    ##
    ingress:
      ## @param proxy.ingress.enabled Set to true to enable ingress record generation
      ##
      enabled: false
      ## @param proxy.ingress.apiVersion Force Ingress API version (automatically detected if not set)
      ##
      apiVersion: ""
      ## @param proxy.ingress.ingressClassName IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
      ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster.
      ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
      ##
      ingressClassName: ""
      ## @param proxy.ingress.pathType Ingress path type
      ##
      pathType: ImplementationSpecific
      ## @param proxy.ingress.hostname Set ingress rule hostname
      ##
      hostname: ""
      ## @param proxy.ingress.path Path to the Proxy pod
      ## NOTE: You may need to set this to '/*' in order to use this with ALB ingress controllers
      ##
      path: /
      ## @param proxy.ingress.annotations [object] Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
      ## Use this parameter to set the required annotations for cert-manager, see
      ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
      ## e.g:
      ## annotations:
      ##   kubernetes.io/ingress.class: nginx
      ##   cert-manager.io/cluster-issuer: cluster-issuer-name
      ##
      annotations: {}
      ## @param proxy.ingress.tls Enable TLS configuration for the host defined at `ingress.hostname` parameter
      ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.ingress.hostname }}`
      ## You can:
      ##   - Use the `ingress.secrets` parameter to create this TLS secret
      ##   - Rely on cert-manager to create it by setting the corresponding annotations
      ##   - Rely on Helm to create self-signed certificates by setting `ingress.selfSigned=true`
      ##
      tls: false
    ## @param proxy.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
    ## Example:
    ## resources:
    ##   requests:
    ##     cpu: 2
    ##     memory: 512Mi
    ##   limits:
    ##     cpu: 3
    ##     memory: 1024Mi
    ##
    resources:
      requests:
        cpu: 60m
        memory: 64Mi
      limits:
        cpu: 125m
        memory: 128Mi
    service:
      public:
        ## @param proxy.service.public.type Public service type
        ##
        type: ClusterIP

  ## @section imagePuller deployment parameters
  imagePuller:
    ## @param imagePuller.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
    ## Example:
    ## resources:
    ##   requests:
    ##     cpu: 2
    ##     memory: 512Mi
    ##   limits:
    ##     cpu: 3
    ##     memory: 1024Mi
    ##
    resources:
      requests:
        cpu: 60m
        memory: 64Mi
      limits:
        cpu: 125m
        memory: 128Mi

  ## @section Singluser deployment parameters      
  singleuser:
    ## @param singluser.image.registry [default: REGISTRY_NAME] Proxy image registry
    ## @param singluser.image.repository [default: REPOSITORY_NAME/configurable-http-proxy] Proxy image repository
    ## @skip singleuser.image.tag Proxy image tag (immutable tags are recommended)
    image:
      registry: docker.io
      repository: bitnami/jupyter-base-notebook
      tag: 4.1.6-debian-12-r27
    persistence:
      ## @param singleuser.persistence.enabled Enable persistent volume creation on Single User instances
      ## If true, use a Persistent Volume Claim, If false, use emptyDir
      ##
      enabled: true
      ## @param singleuser.persistence.storageClass Persistent Volumes storage class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      storageClass: ""
      ## @param singleuser.persistence.accessModes Persistent Volumes access modes
      ##
      accessModes:
        - ReadWriteOnce
      ## @param singleuser.persistence.size Persistent Volumes size
      ##
      size: 10Gi
      ## @param singleuser.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
      ## Example:
      ## resources:
      ##   requests:
      ##     cpu: 2
      ##     memory: 512Mi
      ##   limits:
      ##     cpu: 3
      ##     memory: 1024Mi
      ##
    resources:
      requests:
        cpu: 250m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 512Mi

  ## @section Hub deployment parameters      
  hub:
    ## @param hub.image.registry [default: REGISTRY_NAME] Hub image registry
    ## @param hub.image.repository [default: REPOSITORY_NAME/jupyterhub] Hub image repository
    ## @skip hub.image.tag Hub image tag (immutable tags are recommended)
    image:
      registry: docker.io
      repository: bitnami/jupyterhub
      tag: 4.1.6-debian-12-r15
    ## @param hub.baseUrl Hub base URL
    ##
    baseUrl: /
    ## @param hub.adminUser Hub Dummy authenticator admin user
    ##
    adminUser: admin
    ## @param hub.services JupyterHub services interacting with the JupyterHub API
    ## ref: https://z2jh.jupyter.org/en/latest/administrator/services.html
    ## e.g:
    ## services:
    ##   service-admin:
    ##     apiToken: XXXXXXXXXXXXXXXXXXX
    ##     admin: true
    services: {}
    ## Configuration file passed to the hub. This will be used by the jupyterhub_config.py file
    ## This configuration uses the values for the `singleuser` section. In the upstream chart the
    ## values.yaml file is mounted in the hub container. This is chart, we tried to separate both
    ## configuration so we could follow the Bitnami value standards
    ## @param hub.configuration [string] Hub configuration file (to be used by jupyterhub_config.py)
    ##
    configuration: |
      Chart:
        Name: {{ .Chart.Name }}
        Version: {{ .Chart.Version }}
      Release:
        Name: {{ .Release.Name }}
        Namespace: {{ .Release.Namespace }}
        Service: {{ .Release.Service }}
      hub:
        config:
          JupyterHub:
            admin_access: true
            authenticator_class: nativeauthenticator.NativeAuthenticator
            Authenticator:
              admin_users:
                - {{ .Values.hub.adminUser }}
        cookieSecret:
        concurrentSpawnLimit: 64
        consecutiveFailureLimit: 5
        activeServerLimit:
        db:
          type: postgres
          url: postgresql://{{ ternary .Values.postgresql.auth.username .Values.externalDatabase.user .Values.postgresql.enabled }}@{{ ternary (include "jupyterhub.postgresql.fullname" .) .Values.externalDatabase.host .Values.postgresql.enabled }}:{{ ternary "5432" .Values.externalDatabase.port .Values.postgresql.enabled }}/{{ ternary .Values.postgresql.auth.database .Values.externalDatabase.database .Values.postgresql.enabled }}
        services: {{- include "common.tplvalues.render" ( dict "value" .Values.hub.services "context" $ ) | nindent 8 }}
        allowNamedServers: false
        namedServerLimitPerUser:
        {{- if .Values.hub.metrics.serviceMonitor.enabled }}
        authenticatePrometheus: {{ .Values.hub.metrics.authenticatePrometheus }}
        {{- end }}
        redirectToServer:
        shutdownOnLogout:
      singleuser:
        podNameTemplate: {{ include "common.names.fullname" . }}-jupyter-{username}
        {{- if .Values.singleuser.tolerations }}
        extraTolerations: {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.tolerations "context" $) | nindent 4 }}
        {{- end }}
        {{- if .Values.singleuser.nodeSelector }}
        nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.nodeSelector "context" $) | nindent 4 }}
        {{- end }}
        networkTools:
          image:
            name: {{ include "jupyterhub.hubconfiguration.imageEntry" ( dict "imageRoot" .Values.auxiliaryImage "global" .Values.global) }}
            tag: {{ .Values.auxiliaryImage.tag }}
            digest: {{ .Values.auxiliaryImage.digest }}
            pullPolicy: {{ .Values.auxiliaryImage.pullPolicy }}
            pullSecrets: {{- include "jupyterhub.imagePullSecrets.list" . | nindent 8 }}
        cloudMetadata:
          blockWithIptables: false
        events: true
        extraAnnotations:
          {{- if .Values.commonAnnotations }}
          {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
          {{- end }}
          {{- if .Values.singleuser.podAnnotations }}
          {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.podAnnotations "context" $ ) | nindent 4 }}
          {{- end }}
        extraLabels:
          hub.jupyter.org/network-access-hub: "true"
          app.kubernetes.io/component: singleuser
          {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
          {{- if .Values.singleuser.podLabels }}
          {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.podLabels "context" $ ) | nindent 4 }}
          {{- end }}
        {{- if .Values.singleuser.extraEnvVars }}
        extraEnv: {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.extraEnvVars "context" $ ) | nindent 4 }}
        {{- end }}
        {{- if .Values.singleuser.lifecycleHooks }}
        lifecycleHooks: {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.lifecycleHooks "context" $ ) | nindent 4 }}
        {{- end }}
        {{- if .Values.singleuser.initContainers }}
        initContainers: {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.initContainers "context" $ ) | nindent 4 }}
        {{- end }}
        {{- if .Values.singleuser.sidecars }}
        extraContainers: {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.sidecars "context" $ ) | nindent 4 }}
        {{- end }}
        {{- if not (or (eq .Values.global.compatibility.openshift.adaptSecurityContext "force") (and (eq .Values.global.compatibility.openshift.adaptSecurityContext "auto") (include "common.compatibility.isOpenshift" .))) }}
        {{- if .Values.singleuser.containerSecurityContext.enabled }}
        uid: {{ .Values.singleuser.containerSecurityContext.runAsUser }}
        {{- end }}
        {{- if .Values.singleuser.podSecurityContext.enabled }}
        fsGid: {{ .Values.singleuser.podSecurityContext.fsGroup }}
        {{- end }}
        {{- end }}
        {{- if .Values.singleuser.containerSecurityContext.enabled }}
        containerSecurityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.singleuser.containerSecurityContext "context" $) | nindent 4 }}
        {{- end }}
        {{- if .Values.singleuser.podSecurityContext.enabled }}
        podSecurityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.singleuser.podSecurityContext "context" $) | nindent 4 }}
        {{- end }}
        serviceAccountName: {{ template "jupyterhub.singleuserServiceAccountName" . }}
        automountServiceAccountToken: {{ .Values.singleuser.automountServiceAccountToken }}
        storage:
          {{- if .Values.singleuser.persistence.enabled }}
          type: dynamic
          {{- else }}
          type: none
          {{- end }}
          extraLabels:
            app.kubernetes.io/component: singleuser
            {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 6 }}
          extraVolumes:
            - name: empty-dir
              emptyDir: {}
            {{- if .Values.singleuser.extraVolumes }}
            {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.extraVolumes "context" $ ) | nindent 6 }}
            {{- end }}
          extraVolumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            {{- if .Values.singleuser.extraVolumeMounts }}
            {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.extraVolumeMounts "context" $ ) | nindent 6 }}
            {{- end }}
          capacity: {{ .Values.singleuser.persistence.size }}
          homeMountPath: {{ .Values.singleuser.notebookDir }}
          dynamic:
            {{ include "jupyterhub.storage.class" (dict "persistence" .Values.singleuser.persistence "global" .Values.global) }}
            pvcNameTemplate: {{ include "common.names.fullname" . }}-claim-{username}{servername}
            volumeNameTemplate: {{ include "common.names.fullname" . }}-volume-{username}{servername}
            storageAccessModes: {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.persistence.accessModes "context" $ ) | nindent 8 }}
        image:
          name: {{ include "jupyterhub.hubconfiguration.imageEntry" ( dict "imageRoot" .Values.singleuser.image "global" .Values.global) }}
          tag: {{ .Values.singleuser.image.tag }}
          digest: {{ .Values.singleuser.image.digest }}
          pullPolicy: {{ .Values.singleuser.image.pullPolicy }}
          pullSecrets: {{- include "jupyterhub.imagePullSecrets.list" . | nindent 4 }}
        startTimeout: 300
        {{- include "jupyterhub.singleuser.resources" . | nindent 2 }}
        {{- if .Values.singleuser.command }}
        cmd: {{- include "common.tplvalues.render" (dict "value" .Values.singleuser.command "context" $) | nindent 4 }}
        {{- else }}
        cmd: jupyterhub-singleuser
        {{- end }}
        defaultUrl:
        {{- if .Values.singleuser.profileList }}
        profileList: {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.profileList "context" $) | nindent 4 }}
        {{- end }}
      cull:
        enabled: true
        users: false
        removeNamedServers: false
        timeout: 3600
        every: 600
        concurrency: 10
        maxAge: 0
    ## @param hub.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
    ## Example:
    ## resources:
    ##   requests:
    ##     cpu: 2
    ##     memory: 512Mi
    ##   limits:
    ##     cpu: 3
    ##     memory: 1024Mi
    ##
    resources:
      requests:
        cpu: 125m
        memory: 128Mi
      limits:
        cpu: 250m
        memory: 256Mi

  ## @section JupyterHub database parameters
  
  ## PostgreSQL chart configuration
  ## ref: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
  ## @param postgresql.enabled Switch to enable or disable the PostgreSQL helm chart
  ## @param postgresql.auth.username Name for a custom user to create
  ## @param postgresql.auth.password Password for the custom user to create
  ## @param postgresql.auth.database Name for a custom database to create
  ## @param postgresql.auth.existingSecret Name of existing secret to use for PostgreSQL credentials
  ## @param postgresql.architecture PostgreSQL architecture (`standalone` or `replication`)
  ## @param postgresql.service.ports.postgresql PostgreSQL service port
  ##
  postgresql:
    enabled: false
    auth:
      username: bn_jupyterhub
      password: ""
      database: bitnami_jupyterhub
      existingSecret: ""
  architecture: standalone
  service:
    ports:
      postgresql: 5432
  ## External PostgreSQL configuration
  ## All of these values are only used when postgresql.enabled is set to false
  ## @param externalDatabase.host Database host
  ## @param externalDatabase.port Database port number
  ## @param externalDatabase.user Non-root username for JupyterHub
  ## @param externalDatabase.password Password for the non-root username for JupyterHub
  ## @param externalDatabase.database JupyterHub database name
  ## @param externalDatabase.existingSecret Name of an existing secret resource containing the database credentials
  ## @param externalDatabase.existingSecretPasswordKey Name of an existing secret key containing the database credentials
  ##
  externalDatabase:
    host: "195.148.23.206"
    port: 5432
    user: "jupyterhub"
    database: "jupyterhub"
    password: "jupyterhub"
    existingSecret: ""
    existingSecretPasswordKey: ""
